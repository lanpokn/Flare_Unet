# Training Configuration for Event-Voxel DEFLARE (炫光去除) with Custom Training System
# Task: Remove flare from background_with_flare_events → background_with_light_events

# Data loading configuration for custom training system
loaders:
  # Real deflare dataset paths (Local data_simu)
  train_noisy_dir: "/mnt/e/2025/event_flick_flare/Unet_main/data_simu/physics_method/background_with_flare_events"
  train_clean_dir: "/mnt/e/2025/event_flick_flare/Unet_main/data_simu/physics_method/background_with_light_events"
  val_noisy_dir: "/mnt/e/2025/event_flick_flare/Unet_main/data_simu/physics_method/background_with_flare_events_test"
  val_clean_dir: "/mnt/e/2025/event_flick_flare/Unet_main/data_simu/physics_method/background_with_light_events_test"
  
  # DataLoader parameters
  batch_size: 1           # 单样本batch (避免显存爆炸)
  num_workers: 0          # 单线程避免并发问题
  
  # Event-Voxel conversion parameters  
  sensor_size: [480, 640]         # DSEC sensor resolution
  segment_duration_us: 20000      # 20ms per segment
  num_bins: 8                     # 8 temporal bins per segment
  num_segments: 5                 # 5 segments per 100ms file
  
  # Data transforms (handled by EventVoxelDataset internally)
  transform: null

# Dataset-specific configuration (HDF5Dataset parameters)
# Note: Our test data is already in (8, 480, 640) format - no additional processing needed

# 真正残差学习模型配置 - 2025-01-03 重要更新
model:
  name: TrueResidualUNet3D  # ✅ 使用真正残差学习 (解决背景丢失问题)
  backbone: ResidualUNet3D  # 底层网络类型
  
  # Input/output channels
  in_channels: 1            # Single channel input (voxel grid)
  out_channels: 1           # Single channel output (deflared voxel)
  
  # Architecture parameters (全部传递给TrueResidualUNet3D)
  # f_maps: [16, 32, 64]      # 特征图数量 (轻量配置)
  f_maps: [32, 64, 128]    # 当前配置 (173万参数) - 可能容量不足
  # f_maps: [48, 96, 144]      # 升级配置 (400万参数) - 平衡性能与显存
  num_levels: 3              # 网络深度  
  layer_order: gcr          # Group normalization + Conv + ReLU
  num_groups: 8             # GroupNorm分组数 (重要参数!)
  conv_padding: 1           # 卷积padding
  dropout_prob: 0.1         # Dropout概率
  use_checkpoint: true      # ✅ 启用gradient checkpointing: -60-80%显存, +20-50%时间
  
  # 注意: final_sigmoid在TrueResidualUNet3D中硬编码为False，然后替换为Identity()
  
  # 真正残差学习的关键优势:
  # 1. 零初始化: 初始完美恒等映射 (output = input + 0)
  # 2. 背景保护: 100%保持背景信息，专注学习炫光去除
  # 3. 稳定训练: 从理想状态开始，梯度流畅
  # 4. 数值域: 支持实数域输出 (-∞, +∞)，无激活函数限制

# Loss function configuration
loss:
  name: MSELoss             # Mean Squared Error for regression (deflare)
  # Alternative losses for experimentation:
  # name: L1Loss            # Mean Absolute Error  
  # name: SmoothL1Loss      # Less sensitive to outliers

# Optimizer configuration
optimizer:
  name: Adam
  learning_rate: 0.0002     # Learning rate
  weight_decay: 0.00001     # L2 regularization

# Learning rate scheduler
lr_scheduler:
  name: MultiStepLR
  milestones: [10, 20, 30]  # Epochs to reduce LR
  gamma: 0.2                # LR reduction factor

# Training process configuration
trainer:
  # Checkpointing
  checkpoint_dir: checkpoints/event_voxel_deflare
  resume: null              # Path to resume from checkpoint (null = start from scratch)
  
  # Training duration
  max_num_epochs: 50        # 正常训练50个epochs
  max_num_iterations: null  # 无iteration限制，按epoch训练
  
  # Validation and logging
  validate_after_iters: 1250  # 每1250个iteration验证一次 (快速反馈)
  log_after_iters: 100       # 每1个iteration记录日志到tensorboard
  max_num_workers: 0         # 单线程避免并发问题
  
  # Early stopping (optional)
  # eval_score_higher_is_better: false  # For loss-based metrics (MSE, L1)

# Evaluation metrics during training  
eval_metric:
  name: MSE                 # Use MSE instead of MeanSquaredError
  # Additional metrics can be added:
  # - name: PSNR            # Peak Signal-to-Noise Ratio

# Logging and monitoring
logger:
  name: TensorBoardLogger
  log_dir: logs/event_voxel_denoising

# Device configuration
device: cuda               # 必须使用GPU，不允许CPU模式

# Random seed for reproducibility  
manual_seed: 42

# Data format specifications (for pytorch-3dunet compatibility)
# Input format: (batch_size, channels, depth, height, width)
# Our format: (batch_size, 1, 8, 480, 640) 
#   - batch_size: Variable
#   - channels: 1 (single voxel channel)  
#   - depth: 8 (temporal bins for 20ms segment)
#   - height: 480 (sensor height)
#   - width: 640 (sensor width)