# Training Configuration for Event-Voxel DEFLARE (炫光去除) with Custom Training System
# Task: Remove flare from background_with_flare_events → background_with_light_events

# Data loading configuration for custom training system
loaders:
  # Real deflare dataset paths (WSL format)
  train_noisy_dir: "/mnt/e/2025/event_flick_flare/main/output/data_simu/physics_method/background_with_flare_events"
  train_clean_dir: "/mnt/e/2025/event_flick_flare/main/output/data_simu/physics_method/background_with_light_events"
  val_noisy_dir: "/mnt/e/2025/event_flick_flare/main/output/data_simu/physics_method/background_with_flare_events"
  val_clean_dir: "/mnt/e/2025/event_flick_flare/main/output/data_simu/physics_method/background_with_light_events"
  
  # DataLoader parameters (极小参数用于测试)
  batch_size: 1           # 单样本batch
  num_workers: 0          # 单线程避免并发问题
  
  # Event-Voxel conversion parameters  
  sensor_size: [480, 640]         # DSEC sensor resolution
  segment_duration_us: 20000      # 20ms per segment
  num_bins: 8                     # 8 temporal bins per segment
  num_segments: 5                 # 5 segments per 100ms file
  
  # Data transforms (handled by EventVoxelDataset internally)
  transform: null

# Dataset-specific configuration (HDF5Dataset parameters)
# Note: Our test data is already in (8, 480, 640) format - no additional processing needed

# 3D U-Net model configuration (ULTRA-MINIMAL for debugging)
model:
  name: UNet3D              # Standard 3D U-Net
  # Input/output channels
  in_channels: 1            # Single channel input (voxel grid)
  out_channels: 1           # Single channel output (deflared voxel)
  
  # Architecture parameters (ULTRA-REDUCED for debugging)
  f_maps: [4, 8]            # 极小特征图 (2层: 4->8)
  layer_order: gcr          # Group normalization + Conv + ReLU
  num_groups: 1             # 最小组数 (1 instead of 2) 
  num_levels: 2             # 最小层数 (至少需要2层)
  final_sigmoid: false      # No sigmoid for MSE regression loss
  
  # Advanced options (minimal)
  conv_kernel_size: 3       # Convolution kernel size
  pool_kernel_size: 2       # Pooling kernel size

# Loss function configuration
loss:
  name: MSELoss             # Mean Squared Error for regression (deflare)
  # Alternative losses for experimentation:
  # name: L1Loss            # Mean Absolute Error  
  # name: SmoothL1Loss      # Less sensitive to outliers

# Optimizer configuration
optimizer:
  name: Adam
  learning_rate: 0.0002     # Learning rate
  weight_decay: 0.00001     # L2 regularization

# Learning rate scheduler
lr_scheduler:
  name: MultiStepLR
  milestones: [10, 20, 30]  # Epochs to reduce LR
  gamma: 0.2                # LR reduction factor

# Training process configuration (ULTRA-MINIMAL for debugging)
trainer:
  # Checkpointing
  checkpoint_dir: checkpoints/event_voxel_deflare
  resume: null              # Path to resume from checkpoint (null = start from scratch)
  
  # Training duration (极短用于调试)
  max_num_epochs: 1         # 只训练1个epoch
  max_num_iterations: 3     # 只训练3个iteration调试
  
  # Validation and logging
  validate_after_iters: 2   # 每2个iteration验证一次
  log_after_iters: 1        # 每个iteration都记录日志
  max_num_workers: 0        # 单线程
  
  # Early stopping (optional)
  # eval_score_higher_is_better: false  # For loss-based metrics (MSE, L1)

# Evaluation metrics during training  
eval_metric:
  name: MSE                 # Use MSE instead of MeanSquaredError
  # Additional metrics can be added:
  # - name: PSNR            # Peak Signal-to-Noise Ratio

# Logging and monitoring
logger:
  name: TensorBoardLogger
  log_dir: logs/event_voxel_denoising

# Device configuration
device: cuda               # 必须使用GPU，不允许CPU模式

# Random seed for reproducibility  
manual_seed: 42

# Data format specifications (for pytorch-3dunet compatibility)
# Input format: (batch_size, channels, depth, height, width)
# Our format: (batch_size, 1, 8, 480, 640) 
#   - batch_size: Variable
#   - channels: 1 (single voxel channel)  
#   - depth: 8 (temporal bins for 20ms segment)
#   - height: 480 (sensor height)
#   - width: 640 (sensor width)