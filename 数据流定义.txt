模型输入和输出都是h5文件，表示事件数据。其中每个h5的具体格式如下：（time in microseconds）
/events/p
/events/t
/events/x
/events/Y

模型训练时，应该读取h5文件，将其用encode方法整理成voxels,随后用3D Unet ,UMamaba等可能的方法，输出成voxel。
然后在voxel领域与一个真值voxel计算，得到具体的loss值，最后用一个decode方法，把voxel解码回事件数据。

voxel可以暂时固定时间长度。具体待定。

数据集由外部提供，提供事件数据，转voxel在此处进行。

event_utils-master是比较公认的事件数据处理方法，可视化方法等。包括我们最需要的voxels


需要进一步理解：已有事件数据如何处理voxel的？
1： E2VID等方法，他们如何保证不同分辨率下都可以正常工作
2.  voxel的分法是否有什么技巧。

方案一：数据标准化 (最简单，最常用)
做法: 在送入网络之前，将所有不同分辨率的输入（voxel)，通过插值(Interpolation)或填充(Padding)，统一到模型所期望的那个固定分辨率上。
输出的voxel同样用这种方法变换回原分辨率。
高分辨率 -> 低分辨率: 使用双线性或双三次插值进行下采样。
低分辨率 -> 高分辨率: 使用插值进行上采样，或者在一个黑色背景上进行补零填充。
优点: 实现极其简单，能快速让模型跑起来。
缺点: 会引入信息损失（下采样）或伪影（上采样/填充），可能会降低最终性能。
